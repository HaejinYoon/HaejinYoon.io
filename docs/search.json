[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog 2",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\n안녕하세요"
  },
  {
    "objectID": "posts/Intro/index.html",
    "href": "posts/Intro/index.html",
    "title": "Intro",
    "section": "",
    "text": "안녕하세요 Harry의 첫 블로그 입니다."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Harry Haejin Yoon",
    "section": "",
    "text": "Harry’s blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Harry's Blog",
    "section": "",
    "text": "Order By\n      Default\n      \n        Title\n      \n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\n[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록\n\n\n\ncode\n\n\n\n\n\n\n\n\n\nJul 23, 2025\n\n\nHaejin Harry Yoon\n\n\n\n\n\n\n\n\n\n\n\n\nIntro\n\n\n\nnotice\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nHaejin Harry Yoon\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\nnews\n\ncode\n\nanalysis\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog 2\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nHaejin Harry Yoon\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "Hello my name is Haejin Harry Yoon"
  },
  {
    "objectID": "posts/문제풀이/index.html",
    "href": "posts/문제풀이/index.html",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "",
    "text": "데이터셋은 런던 공유 자전거 시스템의 대여 기록을 다루고 있으며, 대여 및 반납 정보, 날씨 정보, 시간대 등의 다양한 특성(features)을 포함하고 있습니다."
  },
  {
    "objectID": "posts/문제풀이/index.html#데이터-불러오기",
    "href": "posts/문제풀이/index.html#데이터-불러오기",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "데이터 불러오기",
    "text": "데이터 불러오기\n\nimport pandas as pd\n\ndf = pd.read_csv('./bike_data.csv')\nprint(df.head())\n\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472"
  },
  {
    "objectID": "posts/문제풀이/index.html#데이터-속성-변환",
    "href": "posts/문제풀이/index.html#데이터-속성-변환",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "데이터 속성 변환",
    "text": "데이터 속성 변환\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})"
  },
  {
    "objectID": "posts/문제풀이/index.html#문제1.-계절이-1일-떄-가장-대여량이-많은-시간대를-구하시오.",
    "href": "posts/문제풀이/index.html#문제1.-계절이-1일-떄-가장-대여량이-많은-시간대를-구하시오.",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "문제1. 계절이 1일 떄, 가장 대여량이 많은 시간대를 구하시오.",
    "text": "문제1. 계절이 1일 떄, 가장 대여량이 많은 시간대를 구하시오.\n\ndf_s1 = df[df[\"season\"]==1]\ndf_s1\ndf_s1['hour'] = df_s1['datetime'].dt.hour\ndf_s1.groupby('hour')['count'].max()\n\ndf_s1.loc[df_s1['count'].idxmax()][\"hour\"]\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30392\\1773647396.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_s1['hour'] = df_s1['datetime'].dt.hour\n\n\nnp.int32(17)"
  },
  {
    "objectID": "posts/문제풀이/index.html#문제2.-각-계절별-평균-대여량을-구하시오",
    "href": "posts/문제풀이/index.html#문제2.-각-계절별-평균-대여량을-구하시오",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "문제2. 각 계절별 평균 대여량을 구하시오",
    "text": "문제2. 각 계절별 평균 대여량을 구하시오"
  },
  {
    "objectID": "posts/practice1/index.html",
    "href": "posts/practice1/index.html",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "",
    "text": "데이터셋은 런던 공유 자전거 시스템의 대여 기록을 다루고 있으며, 대여 및 반납 정보, 날씨 정보, 시간대 등의 다양한 특성(features)을 포함하고 있습니다.\n\ndatetime: 날짜 및 시간 정보\nseason: 계절 (1: 봄, 2: 여름, 3: 가을, 4: 겨울)\nholiday: 공휴일 여부 (0: 공휴일 아님, 1: 공휴일)\nworkingday: 평일 여부 (0: 주말 또는 공휴일, 1: 평일)\nweather: 날씨 상황 (1: 맑음, 2: 흐림, 3: 약간의 눈/비, 4: 폭우/폭설)\ntemp: 기온 (섭씨)\natemp: 체감 온도 (섭씨)\nhumidity: 습도 (%)\nwindspeed: 풍속 (m/s)\ncasual: 비회원 대여 수\nregistered: 회원 대여 수\ncount: 총 대여 수\n\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('./bike_data.csv')\nprint(df.head())\n\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472  \n\n\n\n\n\n\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\n\n\n\n\n\ndf_s1 = df[df[\"season\"]==1]\ndf_s1\ndf_s1['hour'] = df_s1['datetime'].dt.hour\ndf_s1.groupby('hour')['count'].max()\n\ndf_s1.loc[df_s1['count'].idxmax()][\"hour\"]\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_12320\\1773647396.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_s1['hour'] = df_s1['datetime'].dt.hour\n\n\nnp.int32(17)\n\n\n\n\n\n\n\ndf.groupby('season')['count'].mean()\n\nseason\n1    103.169811\n2    218.803922\n3    265.500000\n4    218.581197\nName: count, dtype: float64\n\n\n\n\n\n\n\ndf_m = df[df['datetime'].dt.month == 1]\ndf_m[\"count\"].sum()\n\nnp.int64(2567)\n\n\n\n\n\n\n\ndf['newdate'] = df[\"datetime\"].dt.date\na = df.groupby('newdate')[['count']].sum()\nmax_date = a.idxmax()\nmax_count = a.max()\n\n\n\n\n\n\ndf[\"newHour\"] = df[\"datetime\"].dt.hour\ndf.groupby(\"newHour\", as_index=False)[\"count\"].mean()\n\n\n\n\n\n\n\n\nnewHour\ncount\n\n\n\n\n0\n0\n43.500000\n\n\n1\n1\n52.714286\n\n\n2\n2\n32.842105\n\n\n3\n3\n12.000000\n\n\n4\n4\n6.687500\n\n\n5\n5\n17.750000\n\n\n6\n6\n58.705882\n\n\n7\n7\n208.937500\n\n\n8\n8\n483.055556\n\n\n9\n9\n260.117647\n\n\n10\n10\n144.130435\n\n\n11\n11\n182.000000\n\n\n12\n12\n277.533333\n\n\n13\n13\n290.600000\n\n\n14\n14\n266.842105\n\n\n15\n15\n255.666667\n\n\n16\n16\n373.052632\n\n\n17\n17\n519.200000\n\n\n18\n18\n447.769231\n\n\n19\n19\n322.103448\n\n\n20\n20\n210.083333\n\n\n21\n21\n196.619048\n\n\n22\n22\n113.560000\n\n\n23\n23\n77.352941\n\n\n\n\n\n\n\n\n\n\n\n\ndf['newDay'] = df[\"datetime\"].dt.weekday\ndf.groupby(\"newDay\")[\"count\"].sum()\n\nnewDay\n0    10191\n1    11198\n2    13839\n3    13319\n4    16315\n5    12105\n6    11066\nName: count, dtype: int64\n\n\n\n\n\n\n\ndf_melted = pd.melt(df, \n                    id_vars=['datetime', 'season'],\n                    value_vars=['casual', 'registered'],\n                    var_name='user_type', \n                    value_name='user_count')\ndf_melted\n\n\n\n\n\n\n\n\ndatetime\nseason\nuser_type\nuser_count\n\n\n\n\n0\n2011-09-05 17:00:00\n3\ncasual\n37\n\n\n1\n2011-05-17 11:00:00\n2\ncasual\n26\n\n\n2\n2011-11-10 09:00:00\n4\ncasual\n23\n\n\n3\n2011-10-13 07:00:00\n4\ncasual\n5\n\n\n4\n2011-10-15 14:00:00\n4\ncasual\n242\n\n\n...\n...\n...\n...\n...\n\n\n865\n2011-04-07 16:00:00\n2\nregistered\n161\n\n\n866\n2011-09-03 22:00:00\n3\nregistered\n96\n\n\n867\n2011-11-12 22:00:00\n4\nregistered\n88\n\n\n868\n2012-04-11 23:00:00\n2\nregistered\n52\n\n\n869\n2012-01-06 09:00:00\n1\nregistered\n237\n\n\n\n\n870 rows × 4 columns\n\n\n\n\n\n\n\n\ndf_melted.groupby(['season', 'user_type'])[[\"user_count\"]].mean().reset_index()\n\n\n\n\n\n\n\n\nseason\nuser_type\nuser_count\n\n\n\n\n0\n1\ncasual\n14.122642\n\n\n1\n1\nregistered\n89.047170\n\n\n2\n2\ncasual\n48.990196\n\n\n3\n2\nregistered\n169.813725\n\n\n4\n3\ncasual\n55.127273\n\n\n5\n3\nregistered\n210.372727\n\n\n6\n4\ncasual\n29.709402\n\n\n7\n4\nregistered\n188.871795"
  },
  {
    "objectID": "posts/practice1/index.html#데이터-불러오기",
    "href": "posts/practice1/index.html#데이터-불러오기",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "데이터 불러오기",
    "text": "데이터 불러오기\n\nimport pandas as pd\n\ndf = pd.read_csv('./bike_data.csv')\nprint(df.head())\n\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472"
  },
  {
    "objectID": "posts/practice1/index.html#데이터-속성-변환",
    "href": "posts/practice1/index.html#데이터-속성-변환",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "데이터 속성 변환",
    "text": "데이터 속성 변환\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})"
  },
  {
    "objectID": "posts/practice1/index.html#문제1.-계절이-1일-떄-가장-대여량이-많은-시간대를-구하시오.",
    "href": "posts/practice1/index.html#문제1.-계절이-1일-떄-가장-대여량이-많은-시간대를-구하시오.",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "문제1. 계절이 1일 떄, 가장 대여량이 많은 시간대를 구하시오.",
    "text": "문제1. 계절이 1일 떄, 가장 대여량이 많은 시간대를 구하시오.\n\ndf_s1 = df[df[\"season\"]==1]\ndf_s1\ndf_s1['hour'] = df_s1['datetime'].dt.hour\ndf_s1.groupby('hour')['count'].max()\n\ndf_s1.loc[df_s1['count'].idxmax()][\"hour\"]\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_30924\\1773647396.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_s1['hour'] = df_s1['datetime'].dt.hour\n\n\nnp.int32(17)"
  },
  {
    "objectID": "posts/practice1/index.html#문제2.-각-계절별-평균-대여량을-구하시오",
    "href": "posts/practice1/index.html#문제2.-각-계절별-평균-대여량을-구하시오",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "문제2. 각 계절별 평균 대여량을 구하시오",
    "text": "문제2. 각 계절별 평균 대여량을 구하시오"
  },
  {
    "objectID": "posts/practice1/index.html#공유-자전거-대여-기록",
    "href": "posts/practice1/index.html#공유-자전거-대여-기록",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "",
    "text": "데이터셋은 런던 공유 자전거 시스템의 대여 기록을 다루고 있으며, 대여 및 반납 정보, 날씨 정보, 시간대 등의 다양한 특성(features)을 포함하고 있습니다.\n\ndatetime: 날짜 및 시간 정보\nseason: 계절 (1: 봄, 2: 여름, 3: 가을, 4: 겨울)\nholiday: 공휴일 여부 (0: 공휴일 아님, 1: 공휴일)\nworkingday: 평일 여부 (0: 주말 또는 공휴일, 1: 평일)\nweather: 날씨 상황 (1: 맑음, 2: 흐림, 3: 약간의 눈/비, 4: 폭우/폭설)\ntemp: 기온 (섭씨)\natemp: 체감 온도 (섭씨)\nhumidity: 습도 (%)\nwindspeed: 풍속 (m/s)\ncasual: 비회원 대여 수\nregistered: 회원 대여 수\ncount: 총 대여 수\n\n\n\n\n\nimport pandas as pd\n\ndf = pd.read_csv('./bike_data.csv')\nprint(df.head())\n\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472  \n\n\n\n\n\n\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\n\n\n\n\n\ndf_s1 = df[df[\"season\"]==1]\ndf_s1\ndf_s1['hour'] = df_s1['datetime'].dt.hour\ndf_s1.groupby('hour')['count'].max()\n\ndf_s1.loc[df_s1['count'].idxmax()][\"hour\"]\n\nC:\\Users\\USER\\AppData\\Local\\Temp\\ipykernel_12320\\1773647396.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_s1['hour'] = df_s1['datetime'].dt.hour\n\n\nnp.int32(17)\n\n\n\n\n\n\n\ndf.groupby('season')['count'].mean()\n\nseason\n1    103.169811\n2    218.803922\n3    265.500000\n4    218.581197\nName: count, dtype: float64\n\n\n\n\n\n\n\ndf_m = df[df['datetime'].dt.month == 1]\ndf_m[\"count\"].sum()\n\nnp.int64(2567)\n\n\n\n\n\n\n\ndf['newdate'] = df[\"datetime\"].dt.date\na = df.groupby('newdate')[['count']].sum()\nmax_date = a.idxmax()\nmax_count = a.max()\n\n\n\n\n\n\ndf[\"newHour\"] = df[\"datetime\"].dt.hour\ndf.groupby(\"newHour\", as_index=False)[\"count\"].mean()\n\n\n\n\n\n\n\n\nnewHour\ncount\n\n\n\n\n0\n0\n43.500000\n\n\n1\n1\n52.714286\n\n\n2\n2\n32.842105\n\n\n3\n3\n12.000000\n\n\n4\n4\n6.687500\n\n\n5\n5\n17.750000\n\n\n6\n6\n58.705882\n\n\n7\n7\n208.937500\n\n\n8\n8\n483.055556\n\n\n9\n9\n260.117647\n\n\n10\n10\n144.130435\n\n\n11\n11\n182.000000\n\n\n12\n12\n277.533333\n\n\n13\n13\n290.600000\n\n\n14\n14\n266.842105\n\n\n15\n15\n255.666667\n\n\n16\n16\n373.052632\n\n\n17\n17\n519.200000\n\n\n18\n18\n447.769231\n\n\n19\n19\n322.103448\n\n\n20\n20\n210.083333\n\n\n21\n21\n196.619048\n\n\n22\n22\n113.560000\n\n\n23\n23\n77.352941\n\n\n\n\n\n\n\n\n\n\n\n\ndf['newDay'] = df[\"datetime\"].dt.weekday\ndf.groupby(\"newDay\")[\"count\"].sum()\n\nnewDay\n0    10191\n1    11198\n2    13839\n3    13319\n4    16315\n5    12105\n6    11066\nName: count, dtype: int64\n\n\n\n\n\n\n\ndf_melted = pd.melt(df, \n                    id_vars=['datetime', 'season'],\n                    value_vars=['casual', 'registered'],\n                    var_name='user_type', \n                    value_name='user_count')\ndf_melted\n\n\n\n\n\n\n\n\ndatetime\nseason\nuser_type\nuser_count\n\n\n\n\n0\n2011-09-05 17:00:00\n3\ncasual\n37\n\n\n1\n2011-05-17 11:00:00\n2\ncasual\n26\n\n\n2\n2011-11-10 09:00:00\n4\ncasual\n23\n\n\n3\n2011-10-13 07:00:00\n4\ncasual\n5\n\n\n4\n2011-10-15 14:00:00\n4\ncasual\n242\n\n\n...\n...\n...\n...\n...\n\n\n865\n2011-04-07 16:00:00\n2\nregistered\n161\n\n\n866\n2011-09-03 22:00:00\n3\nregistered\n96\n\n\n867\n2011-11-12 22:00:00\n4\nregistered\n88\n\n\n868\n2012-04-11 23:00:00\n2\nregistered\n52\n\n\n869\n2012-01-06 09:00:00\n1\nregistered\n237\n\n\n\n\n870 rows × 4 columns\n\n\n\n\n\n\n\n\ndf_melted.groupby(['season', 'user_type'])[[\"user_count\"]].mean().reset_index()\n\n\n\n\n\n\n\n\nseason\nuser_type\nuser_count\n\n\n\n\n0\n1\ncasual\n14.122642\n\n\n1\n1\nregistered\n89.047170\n\n\n2\n2\ncasual\n48.990196\n\n\n3\n2\nregistered\n169.813725\n\n\n4\n3\ncasual\n55.127273\n\n\n5\n3\nregistered\n210.372727\n\n\n6\n4\ncasual\n29.709402\n\n\n7\n4\nregistered\n188.871795"
  },
  {
    "objectID": "posts/practice1/index.html#앱-로그-데이터",
    "href": "posts/practice1/index.html#앱-로그-데이터",
    "title": "[실습] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록",
    "section": "앱 로그 데이터",
    "text": "앱 로그 데이터\n\n로그 데이터 가져오기\n\npd.set_option('display.max_columns', None) # 전체 칼럼 정보 프린트 옵션\ndf = pd.read_csv('./logdata.csv')\ndf\n\n\n\n\n\n\n\n\n로그\n\n\n\n\n0\n2024-07-18 12:34:56 User: 홍길동 Action: Login ID...\n\n\n1\n2024-07-18 12:35:00 User: 김철수 Action: Purchase...\n\n\n2\n2024-07-18 12:36:10 User: 이영희 Action: Logout T...\n\n\n3\n2024-07-18 12:37:22 User: 박지성 Action: Login ID...\n\n\n4\n2024-07-18 12:38:44 User: 최강타 Action: Purchase...\n\n\n5\n2024-07-18 12:39:50 User: 장보고 Action: Logout T...\n\n\n6\n2024-07-18 12:40:56 User: 홍길동 Action: Purchase...\n\n\n7\n2024-07-18 12:41:00 User: 김철수 Action: Login ID...\n\n\n8\n2024-07-18 12:42:10 User: 이영희 Action: Purchase...\n\n\n9\n2024-07-18 12:43:22 User: 박지성 Action: Logout T...\n\n\n10\n2024-07-18 12:44:44 User: 최강타 Action: Login ID...\n\n\n11\n2024-07-18 12:45:50 User: 장보고 Action: Purchase...\n\n\n12\n2024-07-18 12:46:56 User: 홍길동 Action: Logout T...\n\n\n13\n2024-07-18 12:47:00 User: 김철수 Action: Purchase...\n\n\n14\n2024-07-18 12:48:10 User: 이영희 Action: Login ID...\n\n\n15\n2024-07-18 12:49:22 User: 박지성 Action: Purchase...\n\n\n16\n2024-07-18 12:50:44 User: 최강타 Action: Logout T...\n\n\n17\n2024-07-18 12:51:50 User: 장보고 Action: Login ID...\n\n\n18\n2024-07-18 12:52:56 User: 홍길동 Action: Purchase...\n\n\n19\n2024-07-18 12:53:00 User: 김철수 Action: Logout T...\n\n\n20\n2024-07-18 12:54:10 User: 이영희 Action: Purchase...\n\n\n21\n2024-07-18 12:55:22 User: 박지성 Action: Login ID...\n\n\n22\n2024-07-18 12:56:44 User: 최강타 Action: Purchase...\n\n\n23\n2024-07-18 12:57:50 User: 장보고 Action: Logout T...\n\n\n24\n2024-07-18 12:58:56 User: 홍길동 Action: Login ID...\n\n\n25\n2024-07-18 12:59:00 User: 김철수 Action: Purchase...\n\n\n26\n2024-07-18 13:00:10 User: 이영희 Action: Logout T...\n\n\n27\n2024-07-18 13:01:22 User: 박지성 Action: Purchase...\n\n\n28\n2024-07-18 13:02:44 User: 최강타 Action: Login ID...\n\n\n29\n2024-07-18 13:03:50 User: 장보고 Action: Purchase...\n\n\n\n\n\n\n\n\n\n\n문제1. 로그 칼럼에서 숫자 정보만 추출하시오.\n\ndf_extracted_n = df['로그'].str.extractall(r'(\\d+)')\ndf_extracted_n\n\n\n\n\n\n\n\n\n\n0\n\n\n\nmatch\n\n\n\n\n\n0\n0\n2024\n\n\n1\n07\n\n\n2\n18\n\n\n3\n12\n\n\n4\n34\n\n\n...\n...\n...\n\n\n29\n2\n18\n\n\n3\n13\n\n\n4\n03\n\n\n5\n50\n\n\n6\n7500\n\n\n\n\n210 rows × 1 columns\n\n\n\n\n\n\n문제2. 로그 칼럼에서 모든 시간 정보를 추출하시오.\n\ndf_time = df['로그'].str.extract(r'(\\d+:\\d+:\\d+)')\ndf_time\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n12:34:56\n\n\n1\n12:35:00\n\n\n2\n12:36:10\n\n\n3\n12:37:22\n\n\n4\n12:38:44\n\n\n5\n12:39:50\n\n\n6\n12:40:56\n\n\n7\n12:41:00\n\n\n8\n12:42:10\n\n\n9\n12:43:22\n\n\n10\n12:44:44\n\n\n11\n12:45:50\n\n\n12\n12:46:56\n\n\n13\n12:47:00\n\n\n14\n12:48:10\n\n\n15\n12:49:22\n\n\n16\n12:50:44\n\n\n17\n12:51:50\n\n\n18\n12:52:56\n\n\n19\n12:53:00\n\n\n20\n12:54:10\n\n\n21\n12:55:22\n\n\n22\n12:56:44\n\n\n23\n12:57:50\n\n\n24\n12:58:56\n\n\n25\n12:59:00\n\n\n26\n13:00:10\n\n\n27\n13:01:22\n\n\n28\n13:02:44\n\n\n29\n13:03:50\n\n\n\n\n\n\n\n\n\n\n문제3. 로그 칼럼에서 한글 정보만 추출하시오.\n\ndf_Kor = df['로그'].str.extract(r'([가-힣]+)')\ndf_Kor\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n홍길동\n\n\n1\n김철수\n\n\n2\n이영희\n\n\n3\n박지성\n\n\n4\n최강타\n\n\n5\n장보고\n\n\n6\n홍길동\n\n\n7\n김철수\n\n\n8\n이영희\n\n\n9\n박지성\n\n\n10\n최강타\n\n\n11\n장보고\n\n\n12\n홍길동\n\n\n13\n김철수\n\n\n14\n이영희\n\n\n15\n박지성\n\n\n16\n최강타\n\n\n17\n장보고\n\n\n18\n홍길동\n\n\n19\n김철수\n\n\n20\n이영희\n\n\n21\n박지성\n\n\n22\n최강타\n\n\n23\n장보고\n\n\n24\n홍길동\n\n\n25\n김철수\n\n\n26\n이영희\n\n\n27\n박지성\n\n\n28\n최강타\n\n\n29\n장보고\n\n\n\n\n\n\n\n\n\n\n문제4. 로그 칼럼에서 특수 문자를 제거하시오.\n\ndf_special = df['로그'].str.replace(r'([^a-zA-Z0-9가-힣\\s])', '',regex=True)\ndf_special\n\n0         20240718 123456 User 홍길동 Action Login ID12345\n1     20240718 123500 User 김철수 Action Purchase Amoun...\n2       20240718 123610 User 이영희 Action Logout Time 30s\n3         20240718 123722 User 박지성 Action Login ID67890\n4     20240718 123844 User 최강타 Action Purchase Amoun...\n5       20240718 123950 User 장보고 Action Logout Time 25s\n6     20240718 124056 User 홍길동 Action Purchase Amoun...\n7         20240718 124100 User 김철수 Action Login ID23456\n8     20240718 124210 User 이영희 Action Purchase Amoun...\n9       20240718 124322 User 박지성 Action Logout Time 45s\n10        20240718 124444 User 최강타 Action Login ID78901\n11    20240718 124550 User 장보고 Action Purchase Amoun...\n12      20240718 124656 User 홍길동 Action Logout Time 35s\n13    20240718 124700 User 김철수 Action Purchase Amoun...\n14        20240718 124810 User 이영희 Action Login ID56789\n15    20240718 124922 User 박지성 Action Purchase Amoun...\n16      20240718 125044 User 최강타 Action Logout Time 50s\n17        20240718 125150 User 장보고 Action Login ID34567\n18    20240718 125256 User 홍길동 Action Purchase Amoun...\n19      20240718 125300 User 김철수 Action Logout Time 20s\n20    20240718 125410 User 이영희 Action Purchase Amoun...\n21        20240718 125522 User 박지성 Action Login ID12346\n22    20240718 125644 User 최강타 Action Purchase Amoun...\n23      20240718 125750 User 장보고 Action Logout Time 55s\n24        20240718 125856 User 홍길동 Action Login ID67891\n25    20240718 125900 User 김철수 Action Purchase Amoun...\n26      20240718 130010 User 이영희 Action Logout Time 40s\n27    20240718 130122 User 박지성 Action Purchase Amoun...\n28        20240718 130244 User 최강타 Action Login ID78902\n29    20240718 130350 User 장보고 Action Purchase Amoun...\nName: 로그, dtype: object\n\n\n\n\n\n문제5. 로그 칼럼에서 유저, Amount 값을 추출한 후 각 유저별 Amount의 평균값을 계산하시오.\n나의 풀이(시도하였으나 해결하지 못함)\n\ndf['이름'] = df['로그'].str.extract(r'([가-힣]+)')\ndf['Amount'] = df['로그'].str.extract(r'()')\ndf['로그'].str.extract(r'(Amount:\\s + \\d+)')\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\nNaN\n\n\n1\nNaN\n\n\n2\nNaN\n\n\n3\nNaN\n\n\n4\nNaN\n\n\n5\nNaN\n\n\n6\nNaN\n\n\n7\nNaN\n\n\n8\nNaN\n\n\n9\nNaN\n\n\n10\nNaN\n\n\n11\nNaN\n\n\n12\nNaN\n\n\n13\nNaN\n\n\n14\nNaN\n\n\n15\nNaN\n\n\n16\nNaN\n\n\n17\nNaN\n\n\n18\nNaN\n\n\n19\nNaN\n\n\n20\nNaN\n\n\n21\nNaN\n\n\n22\nNaN\n\n\n23\nNaN\n\n\n24\nNaN\n\n\n25\nNaN\n\n\n26\nNaN\n\n\n27\nNaN\n\n\n28\nNaN\n\n\n29\nNaN\n\n\n\n\n\n\n\n풀이\n\ndf['Amount'] = df['로그'].str.extract(r'Amount:\\s*(\\d+)').astype(float)\ndf['User'] = df['로그'].str.extract(r'User:\\s*([가-힣]+)')\ngrouped = df.groupby('User')['Amount'].mean().reset_index()\nprint(\"\\n그룹별 평균 Amount 계산:\", grouped)\n\n\n그룹별 평균 Amount 계산:   User       Amount\n0  김철수  3666.666667\n1  박지성  5750.000000\n2  이영희  4250.000000\n3  장보고  5750.000000\n4  최강타  3750.000000\n5  홍길동  4250.000000"
  }
]